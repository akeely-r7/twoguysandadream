#!/usr/bin/perl
use DBI;
use CGI;
use CGI::Carp qw(fatalsToBrowser);
use CGI::Cookie;
use Session;
use DBTools;
use Leagues;
use URI;
use JSON;

my $cgi = new CGI;

# find out the name of the session user
## Connect to sessions database

my ($my_ip,$namer,$pswd,$my_id,$team_t,$sport_t,$league_t) = checkSession();
my $dbh = dbConnect();

#Get League Data
$league = Leagues->new($league_t,$dbh);
if (! defined $league)
{
  die "ERROR - league object not found!\n";
}
my $draft_type = $league->draft_type();
my $prev_league = $league->prev_league();

open(LOG,">/var/log/fantasy/parsePlayers_log.out") or die("$!");

$in_position = $cgi->param('position');
$in_name = $cgi->param('name');
$in_ranked = $cgi->param('ranked');
$in_timeframe = $cgi->param('timeframe');
$in_rfa = $cgi->param('rfa');

$rosters = "players_won";
$auction = "auction_players";

## if timeframe is 'final', use the final rosters table instead
## TODO how does this work if not finalized yet? Just won't show teams?
if ($in_timeframe eq 'final')
{
  $rosters = 'final_rosters';
}

print LOG "$in_timeframe, $rosters\n";


$WHERE = "active=1 and sport='$sport_t'";
$SORT  = "order by SUBSTRING_INDEX(name,' ',-1) asc";

if ($sport_t eq 'baseball')
{
  $WHERE .= " and (position not like '%P%')" if ($in_position eq 'Util');
  $WHERE .= " and (position like '%P%')" if ($in_position eq 'P');
  $WHERE .= " and (position like '%$in_position%')" if (($in_position ne 'Util') and ($in_position ne 'P') and ($in_position ne 'ALL'));
}
elsif ($sport_t eq 'football')
{
  $WHERE .= " and (position like '%$in_position%')" if ($in_position ne 'ALL');
}

## If the user requests name funneling, apply that to the query
$WHERE .= " and (name like '% $in_name%')" if ($in_name ne "ALL");

## If the user requests a ranked search, sort appropriately
$SORT = "order by rank" if ($in_ranked eq 'on');

## If the user requests RFA results only ...
my $FROM = 'players p';
if ($in_rfa eq 'on')
{
  $FROM .= ', contracts c';
  $WHERE .= " and c.league='$prev_league' and c.player=p.playerid and c.years_left <= 0 and c.broken = 'N'";
  $SORT = "order by rand()";
}

$sth_players = $dbh->prepare("select p.playerid,p.position,p.team,p.rank from $FROM where $WHERE $SORT");
$sth_players->execute();
while (($id,$pos,$team,$rank) = $sth_players->fetchrow_array())
{
  $player =~ s/'/ /g;
  push(@players_array, "$id;$pos;$team;$rank");
}
$sth_players->finish();

# open file to print temporary player listing
open (TEMPS,">$temp_players");
flock(TEMPS,1);
print TEMPS "$in_timeframe\n";

foreach (@players_array)
{
  $found = 0;
  ($file_player,$file_pos,$file_team,$file_rank) = split(';',$_);

  # Check auction for player name
  $sth = $dbh->prepare("SELECT count(1) FROM $auction WHERE name = '$file_player' AND league = '$league_t'")
       or die "Cannot prepare: " . $dbh->errstr();
  $sth->execute() or die "Cannot execute: " . $sth->errstr();
   
  if ($sth->fetchrow() > 0)
  {
    $found = 1;
    $owner = "<b>IN AUCTION</b>";
  }
  $sth->finish();
  

  # check players won / final rosters / contracts for player name
  if ($found == 0)
  {
    $sth = $dbh->prepare("SELECT team, price FROM $rosters WHERE name = '$file_player' AND league = '$league_t'")
         or die "Cannot prepare: " . $dbh->errstr();
    $sth->execute() or die "Cannot execute: " . $sth->errstr();
  
    ($owner, $cost) = $sth->fetchrow_array();
    $sth->finish();
    if ($owner !~ /^$/)
    {
      $found = 1;
      $owner = "<b>$owner</b>";
      $cost = "<b>$cost</b>";

      ## If we're looking for final rosters, see if this dude is on an expiring contract. If so, list him as such
      if ($in_timeframe eq 'final')
      {
        $sth1 = $dbh->prepare("SELECT team, broken, years_left FROM contracts WHERE player = '$file_player' AND league = '$league_t' and locked='yes'")
             or die "Cannot prepare: " . $dbh->errstr();
        $sth1->execute() or die "Cannot execute: " . $sth->errstr();
  
        ($c_owner, $broken, $years_left) = $sth1->fetchrow_array();
        $sth1->finish();

        if (($broken eq 'Y') || ($years_left == -1)) 
        {
          $owner = 'NONE (EXP)';
          $cost = "<b>*$cost*</b>";
        }
        elsif (defined $c_owner)
        {
          $owner = "<b>$c_owner</b>";
          $cost = "<b>*$cost*</b>";
        }
      }
    }
  }

  if ($found == 0)
  {
    $owner = "NONE";
    $cost = "---";
  }

  print TEMPS "$file_player;$file_pos;$file_team;$file_rank;$owner;$cost\n";

}

dbDisconnect($dbh);
close(TEMPS);

print "Location: $return\n\n";


sub by_names
{
  ($a_player,$a_pos,$a_team) = split(';',$players_array{$a});
  ($b_player,$b_pos,$b_team) = split(';',$players_array{$b});
  @a_names = split(' ', $a_player);
  @b_names = split(' ', $b_player);

  $a_size = @a_names;
  $b_size = @b_names;

  ($a_names[$a_size - 1] cmp $b_names[$b_size - 1]) || ($a_names[0] cmp $b_names[0]);
}
